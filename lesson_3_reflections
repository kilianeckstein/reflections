When would you want to use a remote repository rather than keeping all your work local?

A remote repository is necessary if you collaborate with others, especially when they are located anywhere else in a big distance. 
Furthermore, you can use a remote repository as a backup in case your local computer or harddrive breaks.

Why might you want to always pull changes to GitHub manually rather than having Git automatically stay up-to-date with your remote repository?

As said earlier, GitHub might be used as a backup for the local commits and files. In case something went wrong with the local files, you might use the ones in the remote. If they are always up-to-date, the wrong changes might also be pushed to the remote and the function as a backup is gone.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are somehow clones within github, so on the website, between different users. 
Clones on the other hand are copying the repository, for instance locally or from a online repository to your own computer. 
Branches just split up your version history.
When working in a big group, you should use fork to get the shared repository so that your changes aren't added to the shared files right away. 
When working on your own, you can push your changes right away, because they don't effect others directly.

What is the benefit of having a copy of the last known state of the remote stored locally?

One advantage is that you are able to use the files of the remote repository locally and offline. Furthermore you don't do any changes to the remote while you are working on the files. 
This again gives you the possibility to use it as a backup tool. 

How would you collaborate without using Git or GitHub? What would be easier and what would be harder?

It would be easier to work on the same files and have the same version at a time. On the other hand, that is also an argument to work with Git!
If someone makes a mistake, it is not automatically made in all files and other people collaborating may spot the mistake when they get the pull request to merge it with the master branch.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

If you are working on a different function than the main one, you might start a different branch. 
That way you can keep using the main function while working on an additional functionality. 
Working directly in master has the advantage that the whole projects stays clear and that every change takes effect when it is committed.
